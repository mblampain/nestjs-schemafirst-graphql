

interface Drink {
	name: String!
}

type Tea implements Drink {
	name: String!
}

enum CoffeeType {
	ARABICA
	ROBUSTA
}

"""
Coffee model
"""
type Coffee implements Drink {
	id: ID!
	name: String!
	brand: String!
	flavors: [Flavor!]
	createdAt: Date
	type: CoffeeType
}

type Flavor {
	id: ID!
	name: String!
}

union DrinksResult = Coffee | Tea


"""
Create coffee input
"""
input CreateCoffeeInput {
	name: String!
	brand: String!
	flavors: [String!]!
	type: CoffeeType
}

"""
Update coffee input
"""
input UpdateCoffeeInput {
	name: String
	brand: String
	flavors: [String!]
	type: CoffeeType
}

scalar Date

type Query {
	coffees: [Coffee!]!
	coffee(id: ID!): Coffee!
	drinks: [Drink!]!
}

type Mutation {
	createCoffee(createCoffeeInput: CreateCoffeeInput!): Coffee!
	updateCoffee(id: ID!, updateCoffeeInput: UpdateCoffeeInput!): Coffee!
	removeCoffee(id: ID!): Coffee!
}

type Subscription {
	coffeeAdded: Coffee!
}


